<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/gui/src/main/kotlin/org/shiyi/zzuli_drcom/LoginController.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/gui/src/main/kotlin/org/shiyi/zzuli_drcom/LoginController.kt" />
              <option name="originalContent" value="package org.shiyi.zzuli_drcom&#10;&#10;import javafx.application.Platform&#10;import javafx.concurrent.Task&#10;import javafx.fxml.FXML&#10;import javafx.fxml.Initializable&#10;import javafx.scene.control.*&#10;import javafx.scene.layout.VBox&#10;import kotlinx.coroutines.*&#10;import java.net.URL&#10;import java.util.*&#10;import java.util.prefs.Preferences&#10;&#10;class LoginController : Initializable {&#10;&#10;    @FXML private lateinit var rootContainer: VBox&#10;    @FXML private lateinit var titleLabel: Label&#10;    @FXML private lateinit var usernameField: TextField&#10;    @FXML private lateinit var passwordField: PasswordField&#10;    @FXML private lateinit var serverField: TextField&#10;    @FXML private lateinit var loginButton: Button&#10;    @FXML private lateinit var statusLabel: Label&#10;    @FXML private lateinit var progressIndicator: ProgressIndicator&#10;    @FXML private lateinit var rememberCheckBox: CheckBox&#10;    @FXML private lateinit var autoLoginCheckBox: CheckBox&#10;    @FXML private lateinit var disconnectButton: Button&#10;    @FXML private lateinit var networkInfoLabel: Label&#10;&#10;    private var drcomClient: DrComClient? = null&#10;    private val prefs = Preferences.userNodeForPackage(LoginController::class.java)&#10;    private var loginJob: Job? = null&#10;&#10;    override fun initialize(location: URL?, resources: ResourceBundle?) {&#10;        setupUI()&#10;        loadSavedCredentials()&#10;        updateNetworkInfo()&#10;    }&#10;&#10;    private fun setupUI() {&#10;        // 初始状态&#10;        progressIndicator.isVisible = false&#10;        disconnectButton.isVisible = false&#10;        statusLabel.text = &quot;请输入用户名和密码&quot;&#10;&#10;        // 设置默认服务器&#10;        serverField.text = &quot;10.30.1.19&quot;&#10;&#10;        // 绑定事件&#10;        loginButton.setOnAction { handleLogin() }&#10;        disconnectButton.setOnAction { handleDisconnect() }&#10;        rememberCheckBox.setOnAction { handleRememberCredentials() }&#10;&#10;        // 回车键登录&#10;        usernameField.setOnAction { passwordField.requestFocus() }&#10;        passwordField.setOnAction { if (loginButton.isVisible) handleLogin() }&#10;    }&#10;&#10;    private fun loadSavedCredentials() {&#10;        if (prefs.getBoolean(&quot;remember&quot;, false)) {&#10;            usernameField.text = prefs.get(&quot;username&quot;, &quot;&quot;)&#10;            passwordField.text = prefs.get(&quot;password&quot;, &quot;&quot;)&#10;            serverField.text = prefs.get(&quot;server&quot;, &quot;10.30.1.19&quot;)&#10;            rememberCheckBox.isSelected = true&#10;            autoLoginCheckBox.isSelected = prefs.getBoolean(&quot;autoLogin&quot;, false)&#10;&#10;            // 如果开启了自动登录且有保存的凭据&#10;            if (autoLoginCheckBox.isSelected &amp;&amp; usernameField.text.isNotEmpty() &amp;&amp; passwordField.text.isNotEmpty()) {&#10;                Platform.runLater {&#10;                    handleLogin()&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun saveCredentials() {&#10;        if (rememberCheckBox.isSelected) {&#10;            prefs.put(&quot;username&quot;, usernameField.text)&#10;            prefs.put(&quot;password&quot;, passwordField.text)&#10;            prefs.put(&quot;server&quot;, serverField.text)&#10;            prefs.putBoolean(&quot;remember&quot;, true)&#10;            prefs.putBoolean(&quot;autoLogin&quot;, autoLoginCheckBox.isSelected)&#10;        } else {&#10;            prefs.clear()&#10;        }&#10;    }&#10;&#10;    private fun handleRememberCredentials() {&#10;        if (!rememberCheckBox.isSelected) {&#10;            autoLoginCheckBox.isSelected = false&#10;            prefs.clear()&#10;        }&#10;    }&#10;&#10;    private fun updateNetworkInfo() {&#10;        try {&#10;            val config = DrComConfig.create(&quot;&quot;, &quot;&quot;)&#10;            networkInfoLabel.text = &quot;本机IP: ${config.hostIp}  主机名: ${config.hostName}&quot;&#10;        } catch (e: Exception) {&#10;            networkInfoLabel.text = &quot;网络信息获取失败&quot;&#10;        }&#10;    }&#10;&#10;    @FXML&#10;    private fun handleLogin() {&#10;        println(&quot;登录开始...&quot;)&#10;&#10;        // 防止重复点击 - 如果正在登录中，直接返回&#10;        if (loginJob?.isActive == true) {&#10;            println(&quot;登录已在进行中，忽略重复点击&quot;)&#10;            return&#10;        }&#10;&#10;        // 先清理之前的连接&#10;        drcomClient?.disconnect()&#10;        drcomClient = null&#10;&#10;        val username = usernameField.text.trim()&#10;        val password = passwordField.text&#10;        val server = serverField.text.trim()&#10;&#10;        // 输入验证&#10;        if (username.isEmpty()) {&#10;            println(&quot;用户名为空&quot;)&#10;            showError(&quot;请输入用户名&quot;)&#10;            usernameField.requestFocus()&#10;            return&#10;        }&#10;&#10;        if (password.isEmpty()) {&#10;            println(&quot;密码为空&quot;)&#10;            showError(&quot;请输入密码&quot;)&#10;            passwordField.requestFocus()&#10;            return&#10;        }&#10;&#10;        if (server.isEmpty()) {&#10;            println(&quot;服务器地址为空&quot;)&#10;            showError(&quot;请输入服务器地址&quot;)&#10;            serverField.requestFocus()&#10;            return&#10;        }&#10;&#10;        println(&quot;开始设置登录状态...&quot;)&#10;        // 开始登录 - 直接设置 UI 状态&#10;        loginButton.isVisible = false&#10;        disconnectButton.isVisible = false&#10;        progressIndicator.isVisible = true&#10;        usernameField.isDisable = true&#10;        passwordField.isDisable = true&#10;        serverField.isDisable = true&#10;        rememberCheckBox.isDisable = true&#10;        autoLoginCheckBox.isDisable = true&#10;        statusLabel.text = &quot;正在连接到服务器...&quot;&#10;&#10;        println(&quot;启动协程...&quot;)&#10;        loginJob = CoroutineScope(Dispatchers.IO).launch {&#10;            try {&#10;                println(&quot;创建配置...&quot;)&#10;                val config = DrComConfig.create(username, password, server)&#10;                println(&quot;创建客户端...&quot;)&#10;                drcomClient = DrComClient(config)&#10;&#10;                println(&quot;开始登录...&quot;)&#10;                val success = drcomClient?.login() ?: false&#10;                println(&quot;登录结果: $success&quot;)&#10;&#10;                Platform.runLater {&#10;                    println(&quot;更新UI...&quot;)&#10;                    if (success) {&#10;                        println(&quot;登录成功，更新UI...&quot;)&#10;                        statusLabel.text = &quot;登录成功！&quot;&#10;                        statusLabel.styleClass.removeAll(&quot;error-text&quot;, &quot;info-text&quot;)&#10;                        statusLabel.styleClass.add(&quot;success-text&quot;)&#10;                        saveCredentials()&#10;&#10;                        // 设置连接状态&#10;                        loginButton.isVisible = false&#10;                        disconnectButton.isVisible = true&#10;                        progressIndicator.isVisible = false&#10;                        // 保持输入框禁用状态&#10;                    } else {&#10;                        println(&quot;登录失败，清理连接并更新UI...&quot;)&#10;                        // 登录失败时清理连接&#10;                        drcomClient?.disconnect()&#10;                        drcomClient = null&#10;&#10;                        statusLabel.text = &quot;登录失败，请检查用户名和密码&quot;&#10;                        statusLabel.styleClass.removeAll(&quot;success-text&quot;, &quot;info-text&quot;)&#10;                        statusLabel.styleClass.add(&quot;error-text&quot;)&#10;&#10;                        // 恢复登录状态&#10;                        loginButton.isVisible = true&#10;                        disconnectButton.isVisible = false&#10;                        progressIndicator.isVisible = false&#10;                        usernameField.isDisable = false&#10;                        passwordField.isDisable = false&#10;                        serverField.isDisable = false&#10;                        rememberCheckBox.isDisable = false&#10;                        autoLoginCheckBox.isDisable = false&#10;                    }&#10;                }&#10;&#10;            } catch (e: Exception) {&#10;                println(&quot;登录异常: ${e.message}&quot;)&#10;                e.printStackTrace()&#10;&#10;                // 异常时清理连接&#10;                drcomClient?.disconnect()&#10;                drcomClient = null&#10;&#10;                Platform.runLater {&#10;                    println(&quot;异常，更新UI...&quot;)&#10;                    statusLabel.text = &quot;连接失败: ${e.message}&quot;&#10;                    statusLabel.styleClass.removeAll(&quot;success-text&quot;, &quot;info-text&quot;)&#10;                    statusLabel.styleClass.add(&quot;error-text&quot;)&#10;&#10;                    // 恢复登录状态&#10;                    loginButton.isVisible = true&#10;                    disconnectButton.isVisible = false&#10;                    progressIndicator.isVisible = false&#10;                    usernameField.isDisable = false&#10;                    passwordField.isDisable = false&#10;                    serverField.isDisable = false&#10;                    rememberCheckBox.isDisable = false&#10;                    autoLoginCheckBox.isDisable = false&#10;                }&#10;            }&#10;        }&#10;        println(&quot;协程已启动&quot;)&#10;    }&#10;&#10;    @FXML&#10;    private fun handleDisconnect() {&#10;        println(&quot;开始断开连接...&quot;)&#10;&#10;        // 取消登录任务&#10;        loginJob?.cancel()&#10;        loginJob = null&#10;&#10;        // 清理客户端连接&#10;        try {&#10;            drcomClient?.disconnect()&#10;            println(&quot;客户端连接已清理&quot;)&#10;        } catch (e: Exception) {&#10;            println(&quot;清理连接时出错: ${e.message}&quot;)&#10;        } finally {&#10;            drcomClient = null&#10;        }&#10;&#10;        // 恢复UI状态&#10;        loginButton.isVisible = true&#10;        disconnectButton.isVisible = false&#10;        progressIndicator.isVisible = false&#10;        usernameField.isDisable = false&#10;        passwordField.isDisable = false&#10;        serverField.isDisable = false&#10;        rememberCheckBox.isDisable = false&#10;        autoLoginCheckBox.isDisable = false&#10;&#10;        statusLabel.text = &quot;已断开连接&quot;&#10;        statusLabel.styleClass.removeAll(&quot;success-text&quot;, &quot;error-text&quot;)&#10;        statusLabel.styleClass.add(&quot;info-text&quot;)&#10;&#10;        println(&quot;断开连接完成&quot;)&#10;    }&#10;&#10;    private fun setLoginState(isLogging: Boolean) {&#10;        Platform.runLater {&#10;            if (isLogging) {&#10;                loginButton.isVisible = false&#10;                disconnectButton.isVisible = false&#10;                progressIndicator.isVisible = true&#10;&#10;                usernameField.isDisable = true&#10;                passwordField.isDisable = true&#10;                serverField.isDisable = true&#10;                rememberCheckBox.isDisable = true&#10;                autoLoginCheckBox.isDisable = true&#10;            } else {&#10;                loginButton.isVisible = true&#10;                disconnectButton.isVisible = false&#10;                progressIndicator.isVisible = false&#10;&#10;                usernameField.isDisable = false&#10;                passwordField.isDisable = false&#10;                serverField.isDisable = false&#10;                rememberCheckBox.isDisable = false&#10;                autoLoginCheckBox.isDisable = false&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun setConnectedState() {&#10;        Platform.runLater {&#10;            loginButton.isVisible = false&#10;            disconnectButton.isVisible = true&#10;            progressIndicator.isVisible = false&#10;&#10;            usernameField.isDisable = true&#10;            passwordField.isDisable = true&#10;            serverField.isDisable = true&#10;            rememberCheckBox.isDisable = true&#10;            autoLoginCheckBox.isDisable = true&#10;        }&#10;    }&#10;&#10;    private fun showSuccess(message: String) {&#10;        Platform.runLater {&#10;            statusLabel.text = message&#10;            statusLabel.styleClass.removeAll(&quot;error-text&quot;, &quot;info-text&quot;)&#10;            statusLabel.styleClass.add(&quot;success-text&quot;)&#10;        }&#10;    }&#10;&#10;    private fun showError(message: String) {&#10;        Platform.runLater {&#10;            statusLabel.text = message&#10;            statusLabel.styleClass.removeAll(&quot;success-text&quot;, &quot;info-text&quot;)&#10;            statusLabel.styleClass.add(&quot;error-text&quot;)&#10;        }&#10;    }&#10;&#10;    private fun showInfo(message: String) {&#10;        Platform.runLater {&#10;            statusLabel.text = message&#10;            statusLabel.styleClass.removeAll(&quot;success-text&quot;, &quot;error-text&quot;)&#10;            statusLabel.styleClass.add(&quot;info-text&quot;)&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package org.shiyi.zzuli_drcom&#10;&#10;import javafx.application.Platform&#10;import javafx.concurrent.Task&#10;import javafx.fxml.FXML&#10;import javafx.fxml.Initializable&#10;import javafx.scene.control.*&#10;import javafx.scene.layout.VBox&#10;import javafx.scene.layout.HBox&#10;import kotlinx.coroutines.*&#10;import java.net.URL&#10;import java.util.*&#10;import java.util.prefs.Preferences&#10;&#10;class LoginController : Initializable {&#10;&#10;    @FXML private lateinit var rootContainer: VBox&#10;    @FXML private lateinit var titleLabel: Label&#10;    @FXML private lateinit var usernameField: TextField&#10;    @FXML private lateinit var passwordField: PasswordField&#10;    @FXML private lateinit var serverField: TextField&#10;    @FXML private lateinit var serverContainer: VBox&#10;    @FXML private lateinit var advancedButton: Button&#10;    @FXML private lateinit var advancedIndicator: Label&#10;    @FXML private lateinit var loginButton: Button&#10;    @FXML private lateinit var statusLabel: Label&#10;    @FXML private lateinit var progressIndicator: ProgressIndicator&#10;    @FXML private lateinit var rememberCheckBox: CheckBox&#10;    @FXML private lateinit var autoLoginCheckBox: CheckBox&#10;    @FXML private lateinit var disconnectButton: Button&#10;    @FXML private lateinit var networkInfoLabel: Label&#10;&#10;    private var drcomClient: DrComClient? = null&#10;    private val prefs = Preferences.userNodeForPackage(LoginController::class.java)&#10;    private var loginJob: Job? = null&#10;    private var isAdvancedVisible = false&#10;&#10;    override fun initialize(location: URL?, resources: ResourceBundle?) {&#10;        setupUI()&#10;        loadSavedCredentials()&#10;        updateNetworkInfo()&#10;    }&#10;&#10;    private fun setupUI() {&#10;        // 初始状态&#10;        progressIndicator.isVisible = false&#10;        disconnectButton.isVisible = false&#10;        statusLabel.text = &quot;请输入用户名和密码&quot;&#10;&#10;        // 设置默认服务器&#10;        serverField.text = &quot;10.30.1.19&quot;&#10;&#10;        // 高级设置初始状态&#10;        serverContainer.isVisible = false&#10;        serverContainer.isManaged = false&#10;        isAdvancedVisible = false&#10;        advancedIndicator.text = &quot;▼&quot;&#10;&#10;        // 绑定事件&#10;        loginButton.setOnAction { handleLogin() }&#10;        disconnectButton.setOnAction { handleDisconnect() }&#10;        rememberCheckBox.setOnAction { handleRememberCredentials() }&#10;        advancedButton.setOnAction { toggleAdvancedSettings() }&#10;&#10;        // 回车键登录&#10;        usernameField.setOnAction { passwordField.requestFocus() }&#10;        passwordField.setOnAction { if (loginButton.isVisible) handleLogin() }&#10;    }&#10;&#10;    private fun toggleAdvancedSettings() {&#10;        isAdvancedVisible = !isAdvancedVisible&#10;&#10;        if (isAdvancedVisible) {&#10;            // 显示高级设置&#10;            serverContainer.isVisible = true&#10;            serverContainer.isManaged = true&#10;            advancedIndicator.text = &quot;▲&quot;&#10;            advancedButton.text = &quot;隐藏高级设置&quot;&#10;        } else {&#10;            // 隐藏高级设置&#10;            serverContainer.isVisible = false&#10;            serverContainer.isManaged = false&#10;            advancedIndicator.text = &quot;▼&quot;&#10;            advancedButton.text = &quot;高级设置&quot;&#10;        }&#10;    }&#10;&#10;    private fun loadSavedCredentials() {&#10;        if (prefs.getBoolean(&quot;remember&quot;, false)) {&#10;            usernameField.text = prefs.get(&quot;username&quot;, &quot;&quot;)&#10;            passwordField.text = prefs.get(&quot;password&quot;, &quot;&quot;)&#10;            serverField.text = prefs.get(&quot;server&quot;, &quot;10.30.1.19&quot;)&#10;            rememberCheckBox.isSelected = true&#10;            autoLoginCheckBox.isSelected = prefs.getBoolean(&quot;autoLogin&quot;, false)&#10;&#10;            // 如果开启了自动登录且有保存的凭据&#10;            if (autoLoginCheckBox.isSelected &amp;&amp; usernameField.text.isNotEmpty() &amp;&amp; passwordField.text.isNotEmpty()) {&#10;                Platform.runLater {&#10;                    handleLogin()&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun saveCredentials() {&#10;        if (rememberCheckBox.isSelected) {&#10;            prefs.put(&quot;username&quot;, usernameField.text)&#10;            prefs.put(&quot;password&quot;, passwordField.text)&#10;            prefs.put(&quot;server&quot;, serverField.text)&#10;            prefs.putBoolean(&quot;remember&quot;, true)&#10;            prefs.putBoolean(&quot;autoLogin&quot;, autoLoginCheckBox.isSelected)&#10;        } else {&#10;            prefs.clear()&#10;        }&#10;    }&#10;&#10;    private fun handleRememberCredentials() {&#10;        if (!rememberCheckBox.isSelected) {&#10;            autoLoginCheckBox.isSelected = false&#10;            prefs.clear()&#10;        }&#10;    }&#10;&#10;    private fun updateNetworkInfo() {&#10;        try {&#10;            val config = DrComConfig.create(&quot;&quot;, &quot;&quot;)&#10;            networkInfoLabel.text = &quot;本机IP: ${config.hostIp}  主机名: ${config.hostName}&quot;&#10;        } catch (e: Exception) {&#10;            networkInfoLabel.text = &quot;网络信息获取失败&quot;&#10;        }&#10;    }&#10;&#10;    @FXML&#10;    private fun handleLogin() {&#10;        println(&quot;登录开始...&quot;)&#10;&#10;        // 防止重复点击 - 如果正在登录中，直接返回&#10;        if (loginJob?.isActive == true) {&#10;            println(&quot;登录已在进行中，忽略重复点击&quot;)&#10;            return&#10;        }&#10;&#10;        // 先清理之前的连接&#10;        drcomClient?.disconnect()&#10;        drcomClient = null&#10;&#10;        val username = usernameField.text.trim()&#10;        val password = passwordField.text&#10;        val server = serverField.text.trim()&#10;&#10;        // 输入验证&#10;        if (username.isEmpty()) {&#10;            println(&quot;用户名为空&quot;)&#10;            showError(&quot;请输入用户名&quot;)&#10;            usernameField.requestFocus()&#10;            return&#10;        }&#10;&#10;        if (password.isEmpty()) {&#10;            println(&quot;密码为空&quot;)&#10;            showError(&quot;请输入密码&quot;)&#10;            passwordField.requestFocus()&#10;            return&#10;        }&#10;&#10;        if (server.isEmpty()) {&#10;            println(&quot;服务器地址为空&quot;)&#10;            showError(&quot;请输入服务器地址&quot;)&#10;            serverField.requestFocus()&#10;            return&#10;        }&#10;&#10;        println(&quot;开始设置登录状态...&quot;)&#10;        // 开始登录 - 直接设置 UI 状态&#10;        loginButton.isVisible = false&#10;        disconnectButton.isVisible = false&#10;        progressIndicator.isVisible = true&#10;        usernameField.isDisable = true&#10;        passwordField.isDisable = true&#10;        serverField.isDisable = true&#10;        rememberCheckBox.isDisable = true&#10;        autoLoginCheckBox.isDisable = true&#10;        statusLabel.text = &quot;正在连接到服务器...&quot;&#10;&#10;        println(&quot;启动协程...&quot;)&#10;        loginJob = CoroutineScope(Dispatchers.IO).launch {&#10;            try {&#10;                println(&quot;创建配置...&quot;)&#10;                val config = DrComConfig.create(username, password, server)&#10;                println(&quot;创建客户端...&quot;)&#10;                drcomClient = DrComClient(config)&#10;&#10;                println(&quot;开始登录...&quot;)&#10;                val success = drcomClient?.login() ?: false&#10;                println(&quot;登录结果: $success&quot;)&#10;&#10;                Platform.runLater {&#10;                    println(&quot;更新UI...&quot;)&#10;                    if (success) {&#10;                        println(&quot;登录成功，更新UI...&quot;)&#10;                        statusLabel.text = &quot;登录成功！&quot;&#10;                        statusLabel.styleClass.removeAll(&quot;error-text&quot;, &quot;info-text&quot;)&#10;                        statusLabel.styleClass.add(&quot;success-text&quot;)&#10;                        saveCredentials()&#10;&#10;                        // 设置连接状态&#10;                        loginButton.isVisible = false&#10;                        disconnectButton.isVisible = true&#10;                        progressIndicator.isVisible = false&#10;                        // 保持输入框禁用状态&#10;                    } else {&#10;                        println(&quot;登录失败，清理连接并更新UI...&quot;)&#10;                        // 登录失败时清理连接&#10;                        drcomClient?.disconnect()&#10;                        drcomClient = null&#10;&#10;                        statusLabel.text = &quot;登录失败，请检查用户名和密码&quot;&#10;                        statusLabel.styleClass.removeAll(&quot;success-text&quot;, &quot;info-text&quot;)&#10;                        statusLabel.styleClass.add(&quot;error-text&quot;)&#10;&#10;                        // 恢复登录状态&#10;                        loginButton.isVisible = true&#10;                        disconnectButton.isVisible = false&#10;                        progressIndicator.isVisible = false&#10;                        usernameField.isDisable = false&#10;                        passwordField.isDisable = false&#10;                        serverField.isDisable = false&#10;                        rememberCheckBox.isDisable = false&#10;                        autoLoginCheckBox.isDisable = false&#10;                    }&#10;                }&#10;&#10;            } catch (e: Exception) {&#10;                println(&quot;登录异常: ${e.message}&quot;)&#10;                e.printStackTrace()&#10;&#10;                // 异常时清理连接&#10;                drcomClient?.disconnect()&#10;                drcomClient = null&#10;&#10;                Platform.runLater {&#10;                    println(&quot;异常，更新UI...&quot;)&#10;                    statusLabel.text = &quot;连接失败: ${e.message}&quot;&#10;                    statusLabel.styleClass.removeAll(&quot;success-text&quot;, &quot;info-text&quot;)&#10;                    statusLabel.styleClass.add(&quot;error-text&quot;)&#10;&#10;                    // 恢复登录状态&#10;                    loginButton.isVisible = true&#10;                    disconnectButton.isVisible = false&#10;                    progressIndicator.isVisible = false&#10;                    usernameField.isDisable = false&#10;                    passwordField.isDisable = false&#10;                    serverField.isDisable = false&#10;                    rememberCheckBox.isDisable = false&#10;                    autoLoginCheckBox.isDisable = false&#10;                }&#10;            }&#10;        }&#10;        println(&quot;协程已启动&quot;)&#10;    }&#10;&#10;    @FXML&#10;    private fun handleDisconnect() {&#10;        println(&quot;开始断开连接...&quot;)&#10;&#10;        // 取消登录任务&#10;        loginJob?.cancel()&#10;        loginJob = null&#10;&#10;        // 清理客户端连接&#10;        try {&#10;            drcomClient?.disconnect()&#10;            println(&quot;客户端连接已清理&quot;)&#10;        } catch (e: Exception) {&#10;            println(&quot;清理连接时出错: ${e.message}&quot;)&#10;        } finally {&#10;            drcomClient = null&#10;        }&#10;&#10;        // 恢复UI状态&#10;        loginButton.isVisible = true&#10;        disconnectButton.isVisible = false&#10;        progressIndicator.isVisible = false&#10;        usernameField.isDisable = false&#10;        passwordField.isDisable = false&#10;        serverField.isDisable = false&#10;        rememberCheckBox.isDisable = false&#10;        autoLoginCheckBox.isDisable = false&#10;&#10;        statusLabel.text = &quot;已断开连接&quot;&#10;        statusLabel.styleClass.removeAll(&quot;success-text&quot;, &quot;error-text&quot;)&#10;        statusLabel.styleClass.add(&quot;info-text&quot;)&#10;&#10;        println(&quot;断开连接完成&quot;)&#10;    }&#10;&#10;    private fun setLoginState(isLogging: Boolean) {&#10;        Platform.runLater {&#10;            if (isLogging) {&#10;                loginButton.isVisible = false&#10;                disconnectButton.isVisible = false&#10;                progressIndicator.isVisible = true&#10;&#10;                usernameField.isDisable = true&#10;                passwordField.isDisable = true&#10;                serverField.isDisable = true&#10;                rememberCheckBox.isDisable = true&#10;                autoLoginCheckBox.isDisable = true&#10;            } else {&#10;                loginButton.isVisible = true&#10;                disconnectButton.isVisible = false&#10;                progressIndicator.isVisible = false&#10;&#10;                usernameField.isDisable = false&#10;                passwordField.isDisable = false&#10;                serverField.isDisable = false&#10;                rememberCheckBox.isDisable = false&#10;                autoLoginCheckBox.isDisable = false&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun setConnectedState() {&#10;        Platform.runLater {&#10;            loginButton.isVisible = false&#10;            disconnectButton.isVisible = true&#10;            progressIndicator.isVisible = false&#10;&#10;            usernameField.isDisable = true&#10;            passwordField.isDisable = true&#10;            serverField.isDisable = true&#10;            rememberCheckBox.isDisable = true&#10;            autoLoginCheckBox.isDisable = true&#10;        }&#10;    }&#10;&#10;    private fun showSuccess(message: String) {&#10;        Platform.runLater {&#10;            statusLabel.text = message&#10;            statusLabel.styleClass.removeAll(&quot;error-text&quot;, &quot;info-text&quot;)&#10;            statusLabel.styleClass.add(&quot;success-text&quot;)&#10;        }&#10;    }&#10;&#10;    private fun showError(message: String) {&#10;        Platform.runLater {&#10;            statusLabel.text = message&#10;            statusLabel.styleClass.removeAll(&quot;success-text&quot;, &quot;info-text&quot;)&#10;            statusLabel.styleClass.add(&quot;error-text&quot;)&#10;        }&#10;    }&#10;&#10;    private fun showInfo(message: String) {&#10;        Platform.runLater {&#10;            statusLabel.text = message&#10;            statusLabel.styleClass.removeAll(&quot;success-text&quot;, &quot;error-text&quot;)&#10;            statusLabel.styleClass.add(&quot;info-text&quot;)&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/gui/src/main/resources/org/shiyi/zzuli_drcom/drcom-login.fxml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/gui/src/main/resources/org/shiyi/zzuli_drcom/drcom-login.fxml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&#10;&lt;?import javafx.geometry.Insets?&gt;&#10;&lt;?import javafx.scene.control.*?&gt;&#10;&lt;?import javafx.scene.layout.*?&gt;&#10;&lt;?import javafx.scene.text.*?&gt;&#10;&#10;&lt;VBox fx:id=&quot;rootContainer&quot; alignment=&quot;CENTER&quot; prefHeight=&quot;600.0&quot; prefWidth=&quot;400.0&quot; spacing=&quot;20.0&quot; styleClass=&quot;root-container&quot; xmlns=&quot;http://javafx.com/javafx/17.0.2-ea&quot; xmlns:fx=&quot;http://javafx.com/fxml/1&quot; fx:controller=&quot;org.shiyi.zzuli_drcom.LoginController&quot;&gt;&#10;   &lt;children&gt;&#10;      &lt;!-- 顶部间距 --&gt;&#10;      &lt;Region prefHeight=&quot;30.0&quot; /&gt;&#10;&#10;      &lt;!-- 应用图标和标题 --&gt;&#10;      &lt;VBox alignment=&quot;CENTER&quot; spacing=&quot;10.0&quot;&gt;&#10;         &lt;children&gt;&#10;            &lt;Label fx:id=&quot;titleLabel&quot; styleClass=&quot;app-title&quot; text=&quot;DrCOM&quot; /&gt;&#10;            &lt;Label styleClass=&quot;app-subtitle&quot; text=&quot;校园网认证客户端&quot; /&gt;&#10;         &lt;/children&gt;&#10;      &lt;/VBox&gt;&#10;&#10;      &lt;!-- 网络信息显示 --&gt;&#10;      &lt;Label fx:id=&quot;networkInfoLabel&quot; styleClass=&quot;network-info&quot; text=&quot;正在获取网络信息...&quot; /&gt;&#10;&#10;      &lt;!-- 登录表单 --&gt;&#10;      &lt;VBox alignment=&quot;CENTER&quot; spacing=&quot;15.0&quot; styleClass=&quot;form-container&quot;&gt;&#10;         &lt;children&gt;&#10;            &lt;!-- 用户名输入框 --&gt;&#10;            &lt;VBox spacing=&quot;5.0&quot;&gt;&#10;               &lt;children&gt;&#10;                  &lt;Label styleClass=&quot;field-label&quot; text=&quot;用户名&quot; /&gt;&#10;                  &lt;TextField fx:id=&quot;usernameField&quot; promptText=&quot;请输入学号&quot; styleClass=&quot;ios-text-field&quot; /&gt;&#10;               &lt;/children&gt;&#10;            &lt;/VBox&gt;&#10;&#10;            &lt;!-- 密码输入框 --&gt;&#10;            &lt;VBox spacing=&quot;5.0&quot;&gt;&#10;               &lt;children&gt;&#10;                  &lt;Label styleClass=&quot;field-label&quot; text=&quot;密码&quot; /&gt;&#10;                  &lt;PasswordField fx:id=&quot;passwordField&quot; promptText=&quot;请输入密码&quot; styleClass=&quot;ios-text-field&quot; /&gt;&#10;               &lt;/children&gt;&#10;            &lt;/VBox&gt;&#10;&#10;            &lt;!-- 服务器地址 --&gt;&#10;            &lt;VBox spacing=&quot;5.0&quot;&gt;&#10;               &lt;children&gt;&#10;                  &lt;Label styleClass=&quot;field-label&quot; text=&quot;服务器地址&quot; /&gt;&#10;                  &lt;TextField fx:id=&quot;serverField&quot; promptText=&quot;10.30.1.19&quot; styleClass=&quot;ios-text-field&quot; /&gt;&#10;               &lt;/children&gt;&#10;            &lt;/VBox&gt;&#10;&#10;            &lt;!-- 选项复选框 --&gt;&#10;            &lt;VBox spacing=&quot;8.0&quot;&gt;&#10;               &lt;children&gt;&#10;                  &lt;CheckBox fx:id=&quot;rememberCheckBox&quot; styleClass=&quot;ios-checkbox&quot; text=&quot;记住登录信息&quot; /&gt;&#10;                  &lt;CheckBox fx:id=&quot;autoLoginCheckBox&quot; styleClass=&quot;ios-checkbox&quot; text=&quot;自动登录&quot; /&gt;&#10;               &lt;/children&gt;&#10;            &lt;/VBox&gt;&#10;         &lt;/children&gt;&#10;         &lt;padding&gt;&#10;            &lt;Insets bottom=&quot;20.0&quot; left=&quot;40.0&quot; right=&quot;40.0&quot; top=&quot;20.0&quot; /&gt;&#10;         &lt;/padding&gt;&#10;      &lt;/VBox&gt;&#10;&#10;      &lt;!-- 登录按钮和进度指示器 --&gt;&#10;      &lt;VBox alignment=&quot;CENTER&quot; spacing=&quot;15.0&quot;&gt;&#10;         &lt;children&gt;&#10;            &lt;Button fx:id=&quot;loginButton&quot; mnemonicParsing=&quot;false&quot; styleClass=&quot;ios-button-primary&quot; text=&quot;登录&quot; /&gt;&#10;            &lt;Button fx:id=&quot;disconnectButton&quot; mnemonicParsing=&quot;false&quot; styleClass=&quot;ios-button-secondary&quot; text=&quot;断开连接&quot; visible=&quot;false&quot; /&gt;&#10;            &lt;ProgressIndicator fx:id=&quot;progressIndicator&quot; styleClass=&quot;ios-progress&quot; visible=&quot;false&quot; /&gt;&#10;         &lt;/children&gt;&#10;      &lt;/VBox&gt;&#10;&#10;      &lt;!-- 状态信息 --&gt;&#10;      &lt;Label fx:id=&quot;statusLabel&quot; styleClass=&quot;status-text&quot; text=&quot;请输入用户名和密码&quot; textAlignment=&quot;CENTER&quot; wrapText=&quot;true&quot; /&gt;&#10;&#10;      &lt;!-- 底部间距 --&gt;&#10;      &lt;Region prefHeight=&quot;30.0&quot; /&gt;&#10;   &lt;/children&gt;&#10;   &lt;padding&gt;&#10;      &lt;Insets bottom=&quot;20.0&quot; left=&quot;20.0&quot; right=&quot;20.0&quot; top=&quot;20.0&quot; /&gt;&#10;   &lt;/padding&gt;&#10;&lt;/VBox&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&#10;&lt;?import javafx.geometry.Insets?&gt;&#10;&lt;?import javafx.scene.control.*?&gt;&#10;&lt;?import javafx.scene.layout.*?&gt;&#10;&lt;?import javafx.scene.text.*?&gt;&#10;&#10;&lt;VBox fx:id=&quot;rootContainer&quot; alignment=&quot;CENTER&quot; prefHeight=&quot;600.0&quot; prefWidth=&quot;400.0&quot; spacing=&quot;20.0&quot; styleClass=&quot;root-container&quot; xmlns=&quot;http://javafx.com/javafx/17.0.2-ea&quot; xmlns:fx=&quot;http://javafx.com/fxml/1&quot; fx:controller=&quot;org.shiyi.zzuli_drcom.LoginController&quot;&gt;&#10;   &lt;children&gt;&#10;      &lt;!-- 顶部间距 --&gt;&#10;      &lt;Region prefHeight=&quot;30.0&quot; /&gt;&#10;&#10;      &lt;!-- 应用图标和标题 --&gt;&#10;      &lt;VBox alignment=&quot;CENTER&quot; spacing=&quot;10.0&quot;&gt;&#10;         &lt;children&gt;&#10;            &lt;Label fx:id=&quot;titleLabel&quot; styleClass=&quot;app-title&quot; text=&quot;DrCOM&quot; /&gt;&#10;            &lt;Label styleClass=&quot;app-subtitle&quot; text=&quot;校园网认证客户端&quot; /&gt;&#10;         &lt;/children&gt;&#10;      &lt;/VBox&gt;&#10;&#10;      &lt;!-- 网络信息显示 --&gt;&#10;      &lt;Label fx:id=&quot;networkInfoLabel&quot; styleClass=&quot;network-info&quot; text=&quot;正在获取网络信息...&quot; /&gt;&#10;&#10;      &lt;!-- 登录表单 --&gt;&#10;      &lt;VBox alignment=&quot;CENTER&quot; spacing=&quot;15.0&quot; styleClass=&quot;form-container&quot;&gt;&#10;         &lt;children&gt;&#10;            &lt;!-- 用户名输入框 --&gt;&#10;            &lt;VBox spacing=&quot;5.0&quot;&gt;&#10;               &lt;children&gt;&#10;                  &lt;Label styleClass=&quot;field-label&quot; text=&quot;用户名&quot; /&gt;&#10;                  &lt;TextField fx:id=&quot;usernameField&quot; promptText=&quot;请输入学号&quot; styleClass=&quot;ios-text-field&quot; /&gt;&#10;               &lt;/children&gt;&#10;            &lt;/VBox&gt;&#10;&#10;            &lt;!-- 密码输入框 --&gt;&#10;            &lt;VBox spacing=&quot;5.0&quot;&gt;&#10;               &lt;children&gt;&#10;                  &lt;Label styleClass=&quot;field-label&quot; text=&quot;密码&quot; /&gt;&#10;                  &lt;PasswordField fx:id=&quot;passwordField&quot; promptText=&quot;请输入密码&quot; styleClass=&quot;ios-text-field&quot; /&gt;&#10;               &lt;/children&gt;&#10;            &lt;/VBox&gt;&#10;&#10;            &lt;!-- 高级设置按钮 --&gt;&#10;            &lt;HBox alignment=&quot;CENTER&quot; spacing=&quot;5.0&quot;&gt;&#10;               &lt;children&gt;&#10;                  &lt;Button fx:id=&quot;advancedButton&quot; mnemonicParsing=&quot;false&quot; styleClass=&quot;ios-button-link&quot; text=&quot;高级设置&quot; /&gt;&#10;                  &lt;Label fx:id=&quot;advancedIndicator&quot; styleClass=&quot;advanced-indicator&quot; text=&quot;▼&quot; /&gt;&#10;               &lt;/children&gt;&#10;            &lt;/HBox&gt;&#10;&#10;            &lt;!-- 服务器地址 (默认隐藏) --&gt;&#10;            &lt;VBox fx:id=&quot;serverContainer&quot; spacing=&quot;5.0&quot; visible=&quot;false&quot; managed=&quot;false&quot;&gt;&#10;               &lt;children&gt;&#10;                  &lt;Label styleClass=&quot;field-label&quot; text=&quot;服务器地址&quot; /&gt;&#10;                  &lt;TextField fx:id=&quot;serverField&quot; promptText=&quot;10.30.1.19&quot; styleClass=&quot;ios-text-field&quot; /&gt;&#10;               &lt;/children&gt;&#10;            &lt;/VBox&gt;&#10;&#10;            &lt;!-- 选项复选框 --&gt;&#10;            &lt;VBox spacing=&quot;8.0&quot;&gt;&#10;               &lt;children&gt;&#10;                  &lt;CheckBox fx:id=&quot;rememberCheckBox&quot; styleClass=&quot;ios-checkbox&quot; text=&quot;记住登录信息&quot; /&gt;&#10;                  &lt;CheckBox fx:id=&quot;autoLoginCheckBox&quot; styleClass=&quot;ios-checkbox&quot; text=&quot;自动登录&quot; /&gt;&#10;               &lt;/children&gt;&#10;            &lt;/VBox&gt;&#10;         &lt;/children&gt;&#10;         &lt;padding&gt;&#10;            &lt;Insets bottom=&quot;20.0&quot; left=&quot;40.0&quot; right=&quot;40.0&quot; top=&quot;20.0&quot; /&gt;&#10;         &lt;/padding&gt;&#10;      &lt;/VBox&gt;&#10;&#10;      &lt;!-- 登录按钮和进度指示器 --&gt;&#10;      &lt;VBox alignment=&quot;CENTER&quot; spacing=&quot;15.0&quot;&gt;&#10;         &lt;children&gt;&#10;            &lt;Button fx:id=&quot;loginButton&quot; mnemonicParsing=&quot;false&quot; styleClass=&quot;ios-button-primary&quot; text=&quot;登录&quot; /&gt;&#10;            &lt;Button fx:id=&quot;disconnectButton&quot; mnemonicParsing=&quot;false&quot; styleClass=&quot;ios-button-secondary&quot; text=&quot;断开连接&quot; visible=&quot;false&quot; /&gt;&#10;            &lt;ProgressIndicator fx:id=&quot;progressIndicator&quot; styleClass=&quot;ios-progress&quot; visible=&quot;false&quot; /&gt;&#10;         &lt;/children&gt;&#10;      &lt;/VBox&gt;&#10;&#10;      &lt;!-- 状态信息 --&gt;&#10;      &lt;Label fx:id=&quot;statusLabel&quot; styleClass=&quot;status-text&quot; text=&quot;请输入用户名和密码&quot; textAlignment=&quot;CENTER&quot; wrapText=&quot;true&quot; /&gt;&#10;&#10;      &lt;!-- 底部间距 --&gt;&#10;      &lt;Region prefHeight=&quot;30.0&quot; /&gt;&#10;   &lt;/children&gt;&#10;   &lt;padding&gt;&#10;      &lt;Insets bottom=&quot;20.0&quot; left=&quot;20.0&quot; right=&quot;20.0&quot; top=&quot;20.0&quot; /&gt;&#10;   &lt;/padding&gt;&#10;&lt;/VBox&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/gui/src/main/resources/org/shiyi/zzuli_drcom/ios-style.css">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/gui/src/main/resources/org/shiyi/zzuli_drcom/ios-style.css" />
              <option name="originalContent" value="/* iOS风格的DrCOM客户端样式 */&#10;&#10;/* 根容器 */&#10;.root-container {&#10;    -fx-background-color: #f2f2f7;&#10;    -fx-background-radius: 0;&#10;}&#10;&#10;/* 应用标题 */&#10;.app-title {&#10;    -fx-font-family: &quot;SF Pro Display&quot;, &quot;Helvetica Neue&quot;, Arial, sans-serif;&#10;    -fx-font-size: 36px;&#10;    -fx-font-weight: bold;&#10;    -fx-text-fill: #007aff;&#10;}&#10;&#10;.app-subtitle {&#10;    -fx-font-family: &quot;SF Pro Text&quot;, &quot;Helvetica Neue&quot;, Arial, sans-serif;&#10;    -fx-font-size: 16px;&#10;    -fx-text-fill: #8e8e93;&#10;}&#10;&#10;/* 网络信息 */&#10;.network-info {&#10;    -fx-font-family: &quot;SF Pro Text&quot;, &quot;Helvetica Neue&quot;, Arial, sans-serif;&#10;    -fx-font-size: 12px;&#10;    -fx-text-fill: #8e8e93;&#10;    -fx-background-color: #ffffff;&#10;    -fx-background-radius: 8;&#10;    -fx-padding: 8 12 8 12;&#10;}&#10;&#10;/* 表单容器 */&#10;.form-container {&#10;    -fx-background-color: #ffffff;&#10;    -fx-background-radius: 16;&#10;    -fx-effect: dropshadow(gaussian, rgba(0, 0, 0, 0.1), 10, 0, 0, 2);&#10;}&#10;&#10;/* 字段标签 */&#10;.field-label {&#10;    -fx-font-family: &quot;SF Pro Text&quot;, &quot;Helvetica Neue&quot;, Arial, sans-serif;&#10;    -fx-font-size: 14px;&#10;    -fx-font-weight: 500;&#10;    -fx-text-fill: #1d1d1f;&#10;}&#10;&#10;/* iOS风格的文本输入框 */&#10;.ios-text-field {&#10;    -fx-background-color: #f2f2f7;&#10;    -fx-background-radius: 10;&#10;    -fx-border-color: transparent;&#10;    -fx-border-radius: 10;&#10;    -fx-padding: 12 16 12 16;&#10;    -fx-font-family: &quot;SF Pro Text&quot;, &quot;Helvetica Neue&quot;, Arial, sans-serif;&#10;    -fx-font-size: 16px;&#10;    -fx-text-fill: #1d1d1f;&#10;    -fx-prompt-text-fill: #8e8e93;&#10;    -fx-min-height: 44;&#10;    -fx-pref-height: 44;&#10;}&#10;&#10;.ios-text-field:focused {&#10;    -fx-background-color: #ffffff;&#10;    -fx-border-color: #007aff;&#10;    -fx-border-width: 2;&#10;    -fx-effect: dropshadow(gaussian, rgba(0, 122, 255, 0.2), 5, 0, 0, 0);&#10;}&#10;&#10;/* iOS风格的复选框 */&#10;.ios-checkbox {&#10;    -fx-font-family: &quot;SF Pro Text&quot;, &quot;Helvetica Neue&quot;, Arial, sans-serif;&#10;    -fx-font-size: 14px;&#10;    -fx-text-fill: #1d1d1f;&#10;}&#10;&#10;.ios-checkbox .box {&#10;    -fx-background-color: #f2f2f7;&#10;    -fx-background-radius: 3;&#10;    -fx-border-color: #d1d1d6;&#10;    -fx-border-radius: 3;&#10;    -fx-border-width: 1;&#10;}&#10;&#10;.ios-checkbox:selected .box {&#10;    -fx-background-color: #007aff;&#10;    -fx-border-color: #007aff;&#10;}&#10;&#10;.ios-checkbox:selected .mark {&#10;    -fx-background-color: #ffffff;&#10;}&#10;&#10;/* iOS风格的主要按钮 */&#10;.ios-button-primary {&#10;    -fx-background-color: #007aff;&#10;    -fx-background-radius: 12;&#10;    -fx-text-fill: #ffffff;&#10;    -fx-font-family: &quot;SF Pro Text&quot;, &quot;Helvetica Neue&quot;, Arial, sans-serif;&#10;    -fx-font-size: 17px;&#10;    -fx-font-weight: 600;&#10;    -fx-padding: 14 32 14 32;&#10;    -fx-min-width: 200;&#10;    -fx-min-height: 50;&#10;    -fx-border-color: transparent;&#10;    -fx-cursor: hand;&#10;}&#10;&#10;.ios-button-primary:hover {&#10;    -fx-background-color: #0051d5;&#10;    -fx-effect: dropshadow(gaussian, rgba(0, 122, 255, 0.3), 8, 0, 0, 2);&#10;}&#10;&#10;.ios-button-primary:pressed {&#10;    -fx-background-color: #004494;&#10;    -fx-scale-x: 0.98;&#10;    -fx-scale-y: 0.98;&#10;}&#10;&#10;.ios-button-primary:disabled {&#10;    -fx-background-color: #d1d1d6;&#10;    -fx-text-fill: #8e8e93;&#10;    -fx-opacity: 0.6;&#10;}&#10;&#10;/* iOS风格的次要按钮 */&#10;.ios-button-secondary {&#10;    -fx-background-color: #ff3b30;&#10;    -fx-background-radius: 12;&#10;    -fx-text-fill: #ffffff;&#10;    -fx-font-family: &quot;SF Pro Text&quot;, &quot;Helvetica Neue&quot;, Arial, sans-serif;&#10;    -fx-font-size: 17px;&#10;    -fx-font-weight: 600;&#10;    -fx-padding: 14 32 14 32;&#10;    -fx-min-width: 200;&#10;    -fx-min-height: 50;&#10;    -fx-border-color: transparent;&#10;    -fx-cursor: hand;&#10;}&#10;&#10;.ios-button-secondary:hover {&#10;    -fx-background-color: #d70015;&#10;    -fx-effect: dropshadow(gaussian, rgba(255, 59, 48, 0.3), 8, 0, 0, 2);&#10;}&#10;&#10;.ios-button-secondary:pressed {&#10;    -fx-background-color: #b50000;&#10;    -fx-scale-x: 0.98;&#10;    -fx-scale-y: 0.98;&#10;}&#10;&#10;/* iOS风格的进度指示器 */&#10;.ios-progress {&#10;    -fx-progress-color: #007aff;&#10;    -fx-pref-width: 30;&#10;    -fx-pref-height: 30;&#10;}&#10;&#10;.ios-progress .indicator {&#10;    -fx-background-color: transparent;&#10;}&#10;&#10;.ios-progress .percentage {&#10;    -fx-fill: transparent;&#10;}&#10;&#10;/* 状态文本样式 */&#10;.status-text {&#10;    -fx-font-family: &quot;SF Pro Text&quot;, &quot;Helvetica Neue&quot;, Arial, sans-serif;&#10;    -fx-font-size: 14px;&#10;    -fx-text-fill: #8e8e93;&#10;    -fx-text-alignment: center;&#10;    -fx-max-width: 300;&#10;}&#10;&#10;.success-text {&#10;    -fx-text-fill: #30d158;&#10;    -fx-font-weight: 500;&#10;}&#10;&#10;.error-text {&#10;    -fx-text-fill: #ff3b30;&#10;    -fx-font-weight: 500;&#10;}&#10;&#10;.info-text {&#10;    -fx-text-fill: #007aff;&#10;    -fx-font-weight: 500;&#10;}&#10;&#10;/* 滚动条样式 */&#10;.scroll-pane {&#10;    -fx-background-color: transparent;&#10;}&#10;&#10;.scroll-pane .viewport {&#10;    -fx-background-color: transparent;&#10;}&#10;&#10;.scroll-pane .scroll-bar:vertical {&#10;    -fx-background-color: transparent;&#10;    -fx-pref-width: 8;&#10;}&#10;&#10;.scroll-pane .scroll-bar:horizontal {&#10;    -fx-background-color: transparent;&#10;    -fx-pref-height: 8;&#10;}&#10;&#10;.scroll-pane .scroll-bar .thumb {&#10;    -fx-background-color: #c7c7cc;&#10;    -fx-background-radius: 4;&#10;}&#10;&#10;.scroll-pane .scroll-bar .track {&#10;    -fx-background-color: transparent;&#10;}&#10;&#10;/* 工具提示样式 */&#10;.tooltip {&#10;    -fx-background-color: #1d1d1f;&#10;    -fx-background-radius: 6;&#10;    -fx-text-fill: #ffffff;&#10;    -fx-font-family: &quot;SF Pro Text&quot;, &quot;Helvetica Neue&quot;, Arial, sans-serif;&#10;    -fx-font-size: 12px;&#10;    -fx-padding: 6 10 6 10;&#10;    -fx-effect: dropshadow(gaussian, rgba(0, 0, 0, 0.2), 8, 0, 0, 2);&#10;}&#10;&#10;/* 焦点样式优化 */&#10;.ios-text-field:focused,&#10;.ios-checkbox:focused,&#10;.ios-button-primary:focused,&#10;.ios-button-secondary:focused {&#10;    -fx-focus-color: transparent;&#10;    -fx-faint-focus-color: transparent;&#10;}&#10;" />
              <option name="updatedContent" value="/* iOS风格的DrCOM客户端样式 */&#10;&#10;/* 根容器 */&#10;.root-container {&#10;    -fx-background-color: #f2f2f7;&#10;    -fx-background-radius: 0;&#10;}&#10;&#10;/* 应用标题 */&#10;.app-title {&#10;    -fx-font-family: &quot;SF Pro Display&quot;, &quot;Helvetica Neue&quot;, Arial, sans-serif;&#10;    -fx-font-size: 36px;&#10;    -fx-font-weight: bold;&#10;    -fx-text-fill: #007aff;&#10;}&#10;&#10;.app-subtitle {&#10;    -fx-font-family: &quot;SF Pro Text&quot;, &quot;Helvetica Neue&quot;, Arial, sans-serif;&#10;    -fx-font-size: 16px;&#10;    -fx-text-fill: #8e8e93;&#10;}&#10;&#10;/* 网络信息 */&#10;.network-info {&#10;    -fx-font-family: &quot;SF Pro Text&quot;, &quot;Helvetica Neue&quot;, Arial, sans-serif;&#10;    -fx-font-size: 12px;&#10;    -fx-text-fill: #8e8e93;&#10;    -fx-background-color: #ffffff;&#10;    -fx-background-radius: 8;&#10;    -fx-padding: 8 12 8 12;&#10;}&#10;&#10;/* 表单容器 */&#10;.form-container {&#10;    -fx-background-color: #ffffff;&#10;    -fx-background-radius: 16;&#10;    -fx-effect: dropshadow(gaussian, rgba(0, 0, 0, 0.1), 10, 0, 0, 2);&#10;}&#10;&#10;/* 字段标签 */&#10;.field-label {&#10;    -fx-font-family: &quot;SF Pro Text&quot;, &quot;Helvetica Neue&quot;, Arial, sans-serif;&#10;    -fx-font-size: 14px;&#10;    -fx-font-weight: 500;&#10;    -fx-text-fill: #1d1d1f;&#10;}&#10;&#10;/* iOS风格的文本输入框 */&#10;.ios-text-field {&#10;    -fx-background-color: #f2f2f7;&#10;    -fx-background-radius: 10;&#10;    -fx-border-color: transparent;&#10;    -fx-border-radius: 10;&#10;    -fx-padding: 12 16 12 16;&#10;    -fx-font-family: &quot;SF Pro Text&quot;, &quot;Helvetica Neue&quot;, Arial, sans-serif;&#10;    -fx-font-size: 16px;&#10;    -fx-text-fill: #1d1d1f;&#10;    -fx-prompt-text-fill: #8e8e93;&#10;    -fx-min-height: 44;&#10;    -fx-pref-height: 44;&#10;}&#10;&#10;.ios-text-field:focused {&#10;    -fx-background-color: #ffffff;&#10;    -fx-border-color: #007aff;&#10;    -fx-border-width: 2;&#10;    -fx-effect: dropshadow(gaussian, rgba(0, 122, 255, 0.2), 5, 0, 0, 0);&#10;}&#10;&#10;/* iOS风格的复选框 */&#10;.ios-checkbox {&#10;    -fx-font-family: &quot;SF Pro Text&quot;, &quot;Helvetica Neue&quot;, Arial, sans-serif;&#10;    -fx-font-size: 14px;&#10;    -fx-text-fill: #1d1d1f;&#10;}&#10;&#10;.ios-checkbox .box {&#10;    -fx-background-color: #f2f2f7;&#10;    -fx-background-radius: 3;&#10;    -fx-border-color: #d1d1d6;&#10;    -fx-border-radius: 3;&#10;    -fx-border-width: 1;&#10;}&#10;&#10;.ios-checkbox:selected .box {&#10;    -fx-background-color: #007aff;&#10;    -fx-border-color: #007aff;&#10;}&#10;&#10;.ios-checkbox:selected .mark {&#10;    -fx-background-color: #ffffff;&#10;}&#10;&#10;/* iOS风格的主要按钮 */&#10;.ios-button-primary {&#10;    -fx-background-color: #007aff;&#10;    -fx-background-radius: 12;&#10;    -fx-text-fill: #ffffff;&#10;    -fx-font-family: &quot;SF Pro Text&quot;, &quot;Helvetica Neue&quot;, Arial, sans-serif;&#10;    -fx-font-size: 17px;&#10;    -fx-font-weight: 600;&#10;    -fx-padding: 14 24 14 24;&#10;    -fx-min-width: 120;&#10;    -fx-cursor: hand;&#10;    -fx-border-color: transparent;&#10;    -fx-border-radius: 12;&#10;}&#10;&#10;.ios-button-primary:hover {&#10;    -fx-background-color: #0051d5;&#10;    -fx-effect: dropshadow(gaussian, rgba(0, 122, 255, 0.3), 8, 0, 0, 2);&#10;}&#10;&#10;.ios-button-primary:pressed {&#10;    -fx-background-color: #003d99;&#10;    -fx-scale-x: 0.98;&#10;    -fx-scale-y: 0.98;&#10;}&#10;&#10;.ios-button-primary:disabled {&#10;    -fx-background-color: #d1d1d6;&#10;    -fx-text-fill: #8e8e93;&#10;    -fx-effect: none;&#10;}&#10;&#10;/* iOS风格的次要按钮 */&#10;.ios-button-secondary {&#10;    -fx-background-color: #f2f2f7;&#10;    -fx-background-radius: 12;&#10;    -fx-text-fill: #007aff;&#10;    -fx-font-family: &quot;SF Pro Text&quot;, &quot;Helvetica Neue&quot;, Arial, sans-serif;&#10;    -fx-font-size: 17px;&#10;    -fx-font-weight: 600;&#10;    -fx-padding: 14 24 14 24;&#10;    -fx-min-width: 120;&#10;    -fx-cursor: hand;&#10;    -fx-border-color: transparent;&#10;    -fx-border-radius: 12;&#10;}&#10;&#10;.ios-button-secondary:hover {&#10;    -fx-background-color: #e5e5ea;&#10;}&#10;&#10;.ios-button-secondary:pressed {&#10;    -fx-background-color: #d1d1d6;&#10;    -fx-scale-x: 0.98;&#10;    -fx-scale-y: 0.98;&#10;}&#10;&#10;/* 高级设置链接按钮 */&#10;.ios-button-link {&#10;    -fx-background-color: transparent;&#10;    -fx-text-fill: #007aff;&#10;    -fx-font-family: &quot;SF Pro Text&quot;, &quot;Helvetica Neue&quot;, Arial, sans-serif;&#10;    -fx-font-size: 14px;&#10;    -fx-font-weight: 500;&#10;    -fx-underline: false;&#10;    -fx-cursor: hand;&#10;    -fx-border-color: transparent;&#10;    -fx-background-radius: 0;&#10;    -fx-border-radius: 0;&#10;    -fx-padding: 4 8 4 8;&#10;}&#10;&#10;.ios-button-link:hover {&#10;    -fx-text-fill: #0051d5;&#10;    -fx-underline: true;&#10;}&#10;&#10;.ios-button-link:pressed {&#10;    -fx-text-fill: #003d99;&#10;    -fx-scale-x: 0.95;&#10;    -fx-scale-y: 0.95;&#10;}&#10;&#10;/* 高级设置指示器 */&#10;.advanced-indicator {&#10;    -fx-font-family: &quot;SF Pro Text&quot;, &quot;Helvetica Neue&quot;, Arial, sans-serif;&#10;    -fx-font-size: 12px;&#10;    -fx-text-fill: #8e8e93;&#10;    -fx-font-weight: 500;&#10;}&#10;&#10;/* iOS风格的进度指示器 */&#10;.ios-progress {&#10;    -fx-progress-color: #007aff;&#10;    -fx-background-color: #f2f2f7;&#10;    -fx-background-radius: 16;&#10;    -fx-padding: 8;&#10;}&#10;&#10;.ios-progress .percentage {&#10;    -fx-fill: transparent;&#10;}&#10;&#10;/* 状态文本样式 */&#10;.status-text {&#10;    -fx-font-family: &quot;SF Pro Text&quot;, &quot;Helvetica Neue&quot;, Arial, sans-serif;&#10;    -fx-font-size: 14px;&#10;    -fx-text-fill: #8e8e93;&#10;    -fx-text-alignment: center;&#10;    -fx-wrap-text: true;&#10;}&#10;&#10;.status-text.success-text {&#10;    -fx-text-fill: #34c759;&#10;}&#10;&#10;.status-text.error-text {&#10;    -fx-text-fill: #ff3b30;&#10;}&#10;&#10;.status-text.info-text {&#10;    -fx-text-fill: #007aff;&#10;}&#10;&#10;/* 焦点样式 */&#10;.ios-button-primary:focused,&#10;.ios-button-secondary:focused {&#10;    -fx-background-color: #007aff;&#10;    -fx-text-fill: #ffffff;&#10;    -fx-effect: dropshadow(gaussian, rgba(0, 122, 255, 0.5), 10, 0, 0, 0);&#10;}&#10;&#10;.ios-button-link:focused {&#10;    -fx-background-color: rgba(0, 122, 255, 0.1);&#10;    -fx-background-radius: 4;&#10;}&#10;&#10;/* 滚动条样式 */&#10;.scroll-pane {&#10;    -fx-background-color: transparent;&#10;    -fx-border-color: transparent;&#10;}&#10;&#10;.scroll-pane .viewport {&#10;    -fx-background-color: transparent;&#10;}&#10;&#10;.scroll-pane .scroll-bar:vertical .track {&#10;    -fx-background-color: #f2f2f7;&#10;    -fx-background-radius: 4;&#10;}&#10;&#10;.scroll-pane .scroll-bar:vertical .thumb {&#10;    -fx-background-color: #c7c7cc;&#10;    -fx-background-radius: 4;&#10;}&#10;&#10;.scroll-pane .scroll-bar:vertical .thumb:hover {&#10;    -fx-background-color: #aeaeb2;&#10;}&#10;&#10;/* 动画效果 */&#10;.form-container,&#10;.ios-button-primary,&#10;.ios-button-secondary,&#10;.ios-text-field {&#10;    -fx-cursor: hand;&#10;}&#10;&#10;.ios-text-field {&#10;    -fx-cursor: text;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>