<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/gui/src/main/kotlin/org/shiyi/zzuli_drcom/LoginController.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/gui/src/main/kotlin/org/shiyi/zzuli_drcom/LoginController.kt" />
              <option name="originalContent" value="package org.shiyi.zzuli_drcom&#10;&#10;import javafx.application.Platform&#10;import javafx.concurrent.Task&#10;import javafx.fxml.FXML&#10;import javafx.fxml.Initializable&#10;import javafx.scene.control.*&#10;import javafx.scene.layout.VBox&#10;import javafx.scene.layout.HBox&#10;import kotlinx.coroutines.*&#10;import java.net.URL&#10;import java.util.*&#10;import java.util.prefs.Preferences&#10;&#10;class LoginController : Initializable {&#10;&#10;    @FXML private lateinit var rootContainer: VBox&#10;    @FXML private lateinit var titleLabel: Label&#10;    @FXML private lateinit var usernameField: TextField&#10;    @FXML private lateinit var passwordField: PasswordField&#10;    @FXML private lateinit var serverField: TextField&#10;    @FXML private lateinit var serverContainer: VBox&#10;    @FXML private lateinit var advancedButton: Button&#10;    @FXML private lateinit var advancedIndicator: Label&#10;    @FXML private lateinit var loginButton: Button&#10;    @FXML private lateinit var statusLabel: Label&#10;    @FXML private lateinit var progressIndicator: ProgressIndicator&#10;    @FXML private lateinit var rememberCheckBox: CheckBox&#10;    @FXML private lateinit var autoLoginCheckBox: CheckBox&#10;    @FXML private lateinit var disconnectButton: Button&#10;    @FXML private lateinit var networkInfoLabel: Label&#10;    @FXML private lateinit var monitorButton: Button&#10;&#10;    private var drcomClient: DrComClient? = null&#10;    private val prefs = Preferences.userNodeForPackage(LoginController::class.java)&#10;    private var loginJob: Job? = null&#10;    private var isAdvancedVisible = false&#10;&#10;    override fun initialize(location: URL?, resources: ResourceBundle?) {&#10;        setupUI()&#10;        loadSavedCredentials()&#10;        updateNetworkInfo()&#10;    }&#10;&#10;    private fun setupUI() {&#10;        // 初始状态&#10;        progressIndicator.isVisible = false&#10;        disconnectButton.isVisible = false&#10;        statusLabel.text = &quot;请输入用户名和密码&quot;&#10;&#10;        // 设置默认服务器&#10;        serverField.text = &quot;10.30.1.19&quot;&#10;&#10;        // 高级设置初始状态&#10;        serverContainer.isVisible = false&#10;        serverContainer.isManaged = false&#10;        isAdvancedVisible = false&#10;        advancedIndicator.text = &quot;▼&quot;&#10;&#10;        // 绑定事件&#10;        loginButton.setOnAction { handleLogin() }&#10;        disconnectButton.setOnAction { handleDisconnect() }&#10;        rememberCheckBox.setOnAction { handleRememberCredentials() }&#10;        advancedButton.setOnAction { toggleAdvancedSettings() }&#10;        monitorButton.setOnAction { openNetworkMonitor() }&#10;&#10;        // 回车键登录&#10;        usernameField.setOnAction { passwordField.requestFocus() }&#10;        passwordField.setOnAction { if (loginButton.isVisible) handleLogin() }&#10;    }&#10;&#10;    private fun toggleAdvancedSettings() {&#10;        isAdvancedVisible = !isAdvancedVisible&#10;&#10;        if (isAdvancedVisible) {&#10;            // 显示高级设置&#10;            serverContainer.isVisible = true&#10;            serverContainer.isManaged = true&#10;            advancedIndicator.text = &quot;▲&quot;&#10;            advancedButton.text = &quot;隐藏高级设置&quot;&#10;        } else {&#10;            // 隐藏高级设置&#10;            serverContainer.isVisible = false&#10;            serverContainer.isManaged = false&#10;            advancedIndicator.text = &quot;▼&quot;&#10;            advancedButton.text = &quot;高级设置&quot;&#10;        }&#10;    }&#10;&#10;    private fun loadSavedCredentials() {&#10;        if (prefs.getBoolean(&quot;remember&quot;, false)) {&#10;            usernameField.text = prefs.get(&quot;username&quot;, &quot;&quot;)&#10;            passwordField.text = prefs.get(&quot;password&quot;, &quot;&quot;)&#10;            serverField.text = prefs.get(&quot;server&quot;, &quot;10.30.1.19&quot;)&#10;            rememberCheckBox.isSelected = true&#10;            autoLoginCheckBox.isSelected = prefs.getBoolean(&quot;autoLogin&quot;, false)&#10;&#10;            // 如果开启了自动登录且有保存的凭据&#10;            if (autoLoginCheckBox.isSelected &amp;&amp; usernameField.text.isNotEmpty() &amp;&amp; passwordField.text.isNotEmpty()) {&#10;                Platform.runLater {&#10;                    handleLogin()&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun saveCredentials() {&#10;        if (rememberCheckBox.isSelected) {&#10;            prefs.put(&quot;username&quot;, usernameField.text)&#10;            prefs.put(&quot;password&quot;, passwordField.text)&#10;            prefs.put(&quot;server&quot;, serverField.text)&#10;            prefs.putBoolean(&quot;remember&quot;, true)&#10;            prefs.putBoolean(&quot;autoLogin&quot;, autoLoginCheckBox.isSelected)&#10;        } else {&#10;            prefs.clear()&#10;        }&#10;    }&#10;&#10;    private fun handleRememberCredentials() {&#10;        if (!rememberCheckBox.isSelected) {&#10;            autoLoginCheckBox.isSelected = false&#10;            prefs.clear()&#10;        }&#10;    }&#10;&#10;    private fun updateNetworkInfo() {&#10;        try {&#10;            val config = DrComConfig.create(&quot;&quot;, &quot;&quot;)&#10;            networkInfoLabel.text = &quot;本机IP: ${config.hostIp}  主机名: ${config.hostName}&quot;&#10;        } catch (e: Exception) {&#10;            networkInfoLabel.text = &quot;网络信息获取失败&quot;&#10;        }&#10;    }&#10;&#10;    @FXML&#10;    private fun handleLogin() {&#10;        println(&quot;登录开始...&quot;)&#10;&#10;        // 防止重复点击 - 如果正在登录中，直接返回&#10;        if (loginJob?.isActive == true) {&#10;            println(&quot;登录已在进行中，忽略重复点击&quot;)&#10;            return&#10;        }&#10;&#10;        // 先清理之前的连接&#10;        drcomClient?.disconnect()&#10;        drcomClient = null&#10;&#10;        val username = usernameField.text.trim()&#10;        val password = passwordField.text&#10;        val server = serverField.text.trim()&#10;&#10;        // 输入验证&#10;        if (username.isEmpty()) {&#10;            println(&quot;用户名为空&quot;)&#10;            showError(&quot;请输入用户名&quot;)&#10;            usernameField.requestFocus()&#10;            return&#10;        }&#10;&#10;        if (password.isEmpty()) {&#10;            println(&quot;密码为空&quot;)&#10;            showError(&quot;请输入密码&quot;)&#10;            passwordField.requestFocus()&#10;            return&#10;        }&#10;&#10;        if (server.isEmpty()) {&#10;            println(&quot;服务器地址为空&quot;)&#10;            showError(&quot;请输入服务器地址&quot;)&#10;            serverField.requestFocus()&#10;            return&#10;        }&#10;&#10;        println(&quot;开始设置登录状态...&quot;)&#10;        // 开始登录 - 直接设置 UI 状态&#10;        loginButton.isVisible = false&#10;        disconnectButton.isVisible = false&#10;        progressIndicator.isVisible = true&#10;        usernameField.isDisable = true&#10;        passwordField.isDisable = true&#10;        serverField.isDisable = true&#10;        rememberCheckBox.isDisable = true&#10;        autoLoginCheckBox.isDisable = true&#10;        statusLabel.text = &quot;正在连接到服务器...&quot;&#10;&#10;        println(&quot;启动协程...&quot;)&#10;        loginJob = CoroutineScope(Dispatchers.IO).launch {&#10;            try {&#10;                println(&quot;创建配置...&quot;)&#10;                val config = DrComConfig.create(username, password, server)&#10;                println(&quot;创建客户端...&quot;)&#10;                drcomClient = DrComClient(config)&#10;&#10;                println(&quot;开始登录...&quot;)&#10;                val success = drcomClient?.login() ?: false&#10;                println(&quot;登录结果: $success&quot;)&#10;&#10;                Platform.runLater {&#10;                    println(&quot;更新UI...&quot;)&#10;                    if (success) {&#10;                        println(&quot;登录成功，更新UI...&quot;)&#10;                        statusLabel.text = &quot;登录成功！&quot;&#10;                        statusLabel.styleClass.removeAll(&quot;error-text&quot;, &quot;info-text&quot;)&#10;                        statusLabel.styleClass.add(&quot;success-text&quot;)&#10;                        saveCredentials()&#10;&#10;                        // 设置连接状态&#10;                        loginButton.isVisible = false&#10;                        disconnectButton.isVisible = true&#10;                        monitorButton.isVisible = true  // 显示监控按钮&#10;                        progressIndicator.isVisible = false&#10;                        // 保持输入框禁用状态&#10;                    } else {&#10;                        println(&quot;登录失败，清理连接并更新UI...&quot;)&#10;                        // 登录失败时清理连接&#10;                        drcomClient?.disconnect()&#10;                        drcomClient = null&#10;&#10;                        statusLabel.text = &quot;登录失败，请检查用户名和密码&quot;&#10;                        statusLabel.styleClass.removeAll(&quot;success-text&quot;, &quot;info-text&quot;)&#10;                        statusLabel.styleClass.add(&quot;error-text&quot;)&#10;&#10;                        // 恢复登录状态&#10;                        loginButton.isVisible = true&#10;                        disconnectButton.isVisible = false&#10;                        progressIndicator.isVisible = false&#10;                        usernameField.isDisable = false&#10;                        passwordField.isDisable = false&#10;                        serverField.isDisable = false&#10;                        rememberCheckBox.isDisable = false&#10;                        autoLoginCheckBox.isDisable = false&#10;                    }&#10;                }&#10;&#10;            } catch (e: Exception) {&#10;                println(&quot;登录异常: ${e.message}&quot;)&#10;                e.printStackTrace()&#10;&#10;                // 异常时清理连接&#10;                drcomClient?.disconnect()&#10;                drcomClient = null&#10;&#10;                Platform.runLater {&#10;                    println(&quot;异常，更新UI...&quot;)&#10;                    statusLabel.text = &quot;连接失败: ${e.message}&quot;&#10;                    statusLabel.styleClass.removeAll(&quot;success-text&quot;, &quot;info-text&quot;)&#10;                    statusLabel.styleClass.add(&quot;error-text&quot;)&#10;&#10;                    // 恢复登录状态&#10;                    loginButton.isVisible = true&#10;                    disconnectButton.isVisible = false&#10;                    progressIndicator.isVisible = false&#10;                    usernameField.isDisable = false&#10;                    passwordField.isDisable = false&#10;                    serverField.isDisable = false&#10;                    rememberCheckBox.isDisable = false&#10;                    autoLoginCheckBox.isDisable = false&#10;                }&#10;            }&#10;        }&#10;        println(&quot;协程已启动&quot;)&#10;    }&#10;&#10;    @FXML&#10;    private fun handleDisconnect() {&#10;        println(&quot;开始断开连接...&quot;)&#10;&#10;        // 取消登录任务&#10;        loginJob?.cancel()&#10;        loginJob = null&#10;&#10;        // 清理客户端连接&#10;        try {&#10;            drcomClient?.disconnect()&#10;            println(&quot;客户端连接已清理&quot;)&#10;        } catch (e: Exception) {&#10;            println(&quot;清理连接时出错: ${e.message}&quot;)&#10;        } finally {&#10;            drcomClient = null&#10;        }&#10;&#10;        // 恢复UI状态&#10;        loginButton.isVisible = true&#10;        disconnectButton.isVisible = false&#10;        progressIndicator.isVisible = false&#10;        monitorButton.isVisible = false  // 隐藏监控按钮&#10;        usernameField.isDisable = false&#10;        passwordField.isDisable = false&#10;        serverField.isDisable = false&#10;        rememberCheckBox.isDisable = false&#10;        autoLoginCheckBox.isDisable = false&#10;&#10;        statusLabel.text = &quot;已断开连接&quot;&#10;        statusLabel.styleClass.removeAll(&quot;success-text&quot;, &quot;error-text&quot;)&#10;        statusLabel.styleClass.add(&quot;info-text&quot;)&#10;&#10;        println(&quot;断开连接完成&quot;)&#10;    }&#10;&#10;    private fun openNetworkMonitor() {&#10;        try {&#10;            // 加载监控界面&#10;            val fxmlLoader = javafx.fxml.FXMLLoader(javaClass.getResource(&quot;monitor.fxml&quot;))&#10;            val scene = javafx.scene.Scene(fxmlLoader.load(), 500.0, 700.0)&#10;&#10;            // 添加CSS样式&#10;            scene.stylesheets.add(javaClass.getResource(&quot;ios-style.css&quot;)?.toExternalForm())&#10;&#10;            // 获取当前窗口并切换场景&#10;            val stage = monitorButton.scene.window as javafx.stage.Stage&#10;            stage.scene = scene&#10;            stage.title = &quot;DrCOM 网络监控&quot;&#10;            stage.centerOnScreen()&#10;&#10;        } catch (e: Exception) {&#10;            statusLabel.text = &quot;打开监控面板失败: ${e.message}&quot;&#10;            e.printStackTrace()&#10;        }&#10;    }&#10;&#10;    private fun setLoginState(isLogging: Boolean) {&#10;&#10;        Platform.runLater {&#10;            if (isLogging) {&#10;                loginButton.isVisible = false&#10;                disconnectButton.isVisible = false&#10;                progressIndicator.isVisible = true&#10;&#10;                usernameField.isDisable = true&#10;                passwordField.isDisable = true&#10;                serverField.isDisable = true&#10;                rememberCheckBox.isDisable = true&#10;                autoLoginCheckBox.isDisable = true&#10;            } else {&#10;                loginButton.isVisible = true&#10;                disconnectButton.isVisible = false&#10;                progressIndicator.isVisible = false&#10;&#10;                usernameField.isDisable = false&#10;                passwordField.isDisable = false&#10;                serverField.isDisable = false&#10;                rememberCheckBox.isDisable = false&#10;                autoLoginCheckBox.isDisable = false&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun setConnectedState() {&#10;        Platform.runLater {&#10;            loginButton.isVisible = false&#10;            disconnectButton.isVisible = true&#10;            progressIndicator.isVisible = false&#10;&#10;            usernameField.isDisable = true&#10;            passwordField.isDisable = true&#10;            serverField.isDisable = true&#10;            rememberCheckBox.isDisable = true&#10;            autoLoginCheckBox.isDisable = true&#10;        }&#10;    }&#10;&#10;    private fun showSuccess(message: String) {&#10;        Platform.runLater {&#10;            statusLabel.text = message&#10;            statusLabel.styleClass.removeAll(&quot;error-text&quot;, &quot;info-text&quot;)&#10;            statusLabel.styleClass.add(&quot;success-text&quot;)&#10;        }&#10;    }&#10;&#10;    private fun showError(message: String) {&#10;        Platform.runLater {&#10;            statusLabel.text = message&#10;            statusLabel.styleClass.removeAll(&quot;success-text&quot;, &quot;info-text&quot;)&#10;            statusLabel.styleClass.add(&quot;error-text&quot;)&#10;        }&#10;    }&#10;&#10;    private fun showInfo(message: String) {&#10;        Platform.runLater {&#10;            statusLabel.text = message&#10;            statusLabel.styleClass.removeAll(&quot;success-text&quot;, &quot;error-text&quot;)&#10;            statusLabel.styleClass.add(&quot;info-text&quot;)&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package org.shiyi.zzuli_drcom&#10;&#10;import javafx.application.Platform&#10;import javafx.concurrent.Task&#10;import javafx.fxml.FXML&#10;import javafx.fxml.Initializable&#10;import javafx.scene.control.*&#10;import javafx.scene.layout.VBox&#10;import javafx.scene.layout.HBox&#10;import kotlinx.coroutines.*&#10;import java.net.URL&#10;import java.util.*&#10;import java.util.prefs.Preferences&#10;&#10;class LoginController : Initializable {&#10;&#10;    @FXML private lateinit var rootContainer: VBox&#10;    @FXML private lateinit var titleLabel: Label&#10;    @FXML private lateinit var usernameField: TextField&#10;    @FXML private lateinit var passwordField: PasswordField&#10;    @FXML private lateinit var serverField: TextField&#10;    @FXML private lateinit var serverContainer: VBox&#10;    @FXML private lateinit var advancedButton: Button&#10;    @FXML private lateinit var advancedIndicator: Label&#10;    @FXML private lateinit var loginButton: Button&#10;    @FXML private lateinit var statusLabel: Label&#10;    @FXML private lateinit var progressIndicator: ProgressIndicator&#10;    @FXML private lateinit var rememberCheckBox: CheckBox&#10;    @FXML private lateinit var autoLoginCheckBox: CheckBox&#10;    @FXML private lateinit var disconnectButton: Button&#10;    @FXML private lateinit var networkInfoLabel: Label&#10;    @FXML private lateinit var monitorButton: Button&#10;&#10;    private var drcomClient: DrComClient? = null&#10;    private val prefs = Preferences.userNodeForPackage(LoginController::class.java)&#10;    private var loginJob: Job? = null&#10;    private var isAdvancedVisible = false&#10;&#10;    // 添加静态变量来保存全局登录状态&#10;    companion object {&#10;        private var globalDrcomClient: DrComClient? = null&#10;        private var isLoggedIn = false&#10;    }&#10;&#10;    override fun initialize(location: URL?, resources: ResourceBundle?) {&#10;        setupUI()&#10;        loadSavedCredentials()&#10;        updateNetworkInfo()&#10;&#10;        // 检查是否需要恢复登录状态&#10;        if (isLoggedIn &amp;&amp; globalDrcomClient != null) {&#10;            restoreLoginState()&#10;        }&#10;    }&#10;&#10;    private fun setupUI() {&#10;        // 初始状态&#10;        progressIndicator.isVisible = false&#10;        disconnectButton.isVisible = false&#10;        statusLabel.text = &quot;请输入用户名和密码&quot;&#10;&#10;        // 设置默认服务器&#10;        serverField.text = &quot;10.30.1.19&quot;&#10;&#10;        // 高级设置初始状态&#10;        serverContainer.isVisible = false&#10;        serverContainer.isManaged = false&#10;        isAdvancedVisible = false&#10;        advancedIndicator.text = &quot;▼&quot;&#10;&#10;        // 绑定事件&#10;        loginButton.setOnAction { handleLogin() }&#10;        disconnectButton.setOnAction { handleDisconnect() }&#10;        rememberCheckBox.setOnAction { handleRememberCredentials() }&#10;        advancedButton.setOnAction { toggleAdvancedSettings() }&#10;        monitorButton.setOnAction { openNetworkMonitor() }&#10;&#10;        // 回车键登录&#10;        usernameField.setOnAction { passwordField.requestFocus() }&#10;        passwordField.setOnAction { if (loginButton.isVisible) handleLogin() }&#10;    }&#10;&#10;    private fun toggleAdvancedSettings() {&#10;        isAdvancedVisible = !isAdvancedVisible&#10;&#10;        if (isAdvancedVisible) {&#10;            // 显示高级设置&#10;            serverContainer.isVisible = true&#10;            serverContainer.isManaged = true&#10;            advancedIndicator.text = &quot;▲&quot;&#10;            advancedButton.text = &quot;隐藏高级设置&quot;&#10;        } else {&#10;            // 隐藏高级设置&#10;            serverContainer.isVisible = false&#10;            serverContainer.isManaged = false&#10;            advancedIndicator.text = &quot;▼&quot;&#10;            advancedButton.text = &quot;高级设置&quot;&#10;        }&#10;    }&#10;&#10;    private fun loadSavedCredentials() {&#10;        if (prefs.getBoolean(&quot;remember&quot;, false)) {&#10;            usernameField.text = prefs.get(&quot;username&quot;, &quot;&quot;)&#10;            passwordField.text = prefs.get(&quot;password&quot;, &quot;&quot;)&#10;            serverField.text = prefs.get(&quot;server&quot;, &quot;10.30.1.19&quot;)&#10;            rememberCheckBox.isSelected = true&#10;            autoLoginCheckBox.isSelected = prefs.getBoolean(&quot;autoLogin&quot;, false)&#10;&#10;            // 如果开启了自动登录且有保存的凭据&#10;            if (autoLoginCheckBox.isSelected &amp;&amp; usernameField.text.isNotEmpty() &amp;&amp; passwordField.text.isNotEmpty()) {&#10;                Platform.runLater {&#10;                    handleLogin()&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun saveCredentials() {&#10;        if (rememberCheckBox.isSelected) {&#10;            prefs.put(&quot;username&quot;, usernameField.text)&#10;            prefs.put(&quot;password&quot;, passwordField.text)&#10;            prefs.put(&quot;server&quot;, serverField.text)&#10;            prefs.putBoolean(&quot;remember&quot;, true)&#10;            prefs.putBoolean(&quot;autoLogin&quot;, autoLoginCheckBox.isSelected)&#10;        } else {&#10;            prefs.clear()&#10;        }&#10;    }&#10;&#10;    private fun handleRememberCredentials() {&#10;        if (!rememberCheckBox.isSelected) {&#10;            autoLoginCheckBox.isSelected = false&#10;            prefs.clear()&#10;        }&#10;    }&#10;&#10;    private fun updateNetworkInfo() {&#10;        try {&#10;            val config = DrComConfig.create(&quot;&quot;, &quot;&quot;)&#10;            networkInfoLabel.text = &quot;本机IP: ${config.hostIp}  主机名: ${config.hostName}&quot;&#10;        } catch (e: Exception) {&#10;            networkInfoLabel.text = &quot;网络信息获取失败&quot;&#10;        }&#10;    }&#10;&#10;    @FXML&#10;    private fun handleLogin() {&#10;        println(&quot;登录开始...&quot;)&#10;&#10;        // 防止重复点击 - 如果正在登录中，直接返回&#10;        if (loginJob?.isActive == true) {&#10;            println(&quot;登录已在进行中，忽略重复点击&quot;)&#10;            return&#10;        }&#10;&#10;        // 先清理之前的连接&#10;        drcomClient?.disconnect()&#10;        drcomClient = null&#10;&#10;        val username = usernameField.text.trim()&#10;        val password = passwordField.text&#10;        val server = serverField.text.trim()&#10;&#10;        // 输入验证&#10;        if (username.isEmpty()) {&#10;            println(&quot;用户名为空&quot;)&#10;            showError(&quot;请输入用户名&quot;)&#10;            usernameField.requestFocus()&#10;            return&#10;        }&#10;&#10;        if (password.isEmpty()) {&#10;            println(&quot;密码为空&quot;)&#10;            showError(&quot;请输入密码&quot;)&#10;            passwordField.requestFocus()&#10;            return&#10;        }&#10;&#10;        if (server.isEmpty()) {&#10;            println(&quot;服务器地址为空&quot;)&#10;            showError(&quot;请输入服务器地址&quot;)&#10;            serverField.requestFocus()&#10;            return&#10;        }&#10;&#10;        println(&quot;开始设置登录状态...&quot;)&#10;        // 开始登录 - 直接设置 UI 状态&#10;        loginButton.isVisible = false&#10;        disconnectButton.isVisible = false&#10;        progressIndicator.isVisible = true&#10;        usernameField.isDisable = true&#10;        passwordField.isDisable = true&#10;        serverField.isDisable = true&#10;        rememberCheckBox.isDisable = true&#10;        autoLoginCheckBox.isDisable = true&#10;        statusLabel.text = &quot;正在连接到服务器...&quot;&#10;&#10;        println(&quot;启动协程...&quot;)&#10;        loginJob = CoroutineScope(Dispatchers.IO).launch {&#10;            try {&#10;                println(&quot;创建配置...&quot;)&#10;                val config = DrComConfig.create(username, password, server)&#10;                println(&quot;创建客户端...&quot;)&#10;                drcomClient = DrComClient(config)&#10;&#10;                println(&quot;开始登录...&quot;)&#10;                val success = drcomClient?.login() ?: false&#10;                println(&quot;登录结果: $success&quot;)&#10;&#10;                Platform.runLater {&#10;                    println(&quot;更新UI...&quot;)&#10;                    if (success) {&#10;                        println(&quot;登录成功，更新UI...&quot;)&#10;                        statusLabel.text = &quot;登录成功！&quot;&#10;                        statusLabel.styleClass.removeAll(&quot;error-text&quot;, &quot;info-text&quot;)&#10;                        statusLabel.styleClass.add(&quot;success-text&quot;)&#10;                        saveCredentials()&#10;&#10;                        // 设置连接状态&#10;                        loginButton.isVisible = false&#10;                        disconnectButton.isVisible = true&#10;                        monitorButton.isVisible = true  // 显示监控按钮&#10;                        progressIndicator.isVisible = false&#10;                        // 保持输入框禁用状态&#10;&#10;                        // 更新全局登录状态&#10;                        isLoggedIn = true&#10;                        globalDrcomClient = drcomClient&#10;                    } else {&#10;                        println(&quot;登录失败，清理连接并更新UI...&quot;)&#10;                        // 登录失败时清理连接&#10;                        drcomClient?.disconnect()&#10;                        drcomClient = null&#10;&#10;                        statusLabel.text = &quot;登录失败，请检查用户名和密码&quot;&#10;                        statusLabel.styleClass.removeAll(&quot;success-text&quot;, &quot;info-text&quot;)&#10;                        statusLabel.styleClass.add(&quot;error-text&quot;)&#10;&#10;                        // 恢复登录状态&#10;                        loginButton.isVisible = true&#10;                        disconnectButton.isVisible = false&#10;                        progressIndicator.isVisible = false&#10;                        usernameField.isDisable = false&#10;                        passwordField.isDisable = false&#10;                        serverField.isDisable = false&#10;                        rememberCheckBox.isDisable = false&#10;                        autoLoginCheckBox.isDisable = false&#10;                    }&#10;                }&#10;&#10;            } catch (e: Exception) {&#10;                println(&quot;登录异常: ${e.message}&quot;)&#10;                e.printStackTrace()&#10;&#10;                // 异常时清理连接&#10;                drcomClient?.disconnect()&#10;                drcomClient = null&#10;&#10;                Platform.runLater {&#10;                    println(&quot;异常，更新UI...&quot;)&#10;                    statusLabel.text = &quot;连接失败: ${e.message}&quot;&#10;                    statusLabel.styleClass.removeAll(&quot;success-text&quot;, &quot;info-text&quot;)&#10;                    statusLabel.styleClass.add(&quot;error-text&quot;)&#10;&#10;                    // 恢复登录状态&#10;                    loginButton.isVisible = true&#10;                    disconnectButton.isVisible = false&#10;                    progressIndicator.isVisible = false&#10;                    usernameField.isDisable = false&#10;                    passwordField.isDisable = false&#10;                    serverField.isDisable = false&#10;                    rememberCheckBox.isDisable = false&#10;                    autoLoginCheckBox.isDisable = false&#10;                }&#10;            }&#10;        }&#10;        println(&quot;协程已启动&quot;)&#10;    }&#10;&#10;    @FXML&#10;    private fun handleDisconnect() {&#10;        println(&quot;开始断开连接...&quot;)&#10;&#10;        // 取消登录任务&#10;        loginJob?.cancel()&#10;        loginJob = null&#10;&#10;        // 清理客户端连接&#10;        try {&#10;            drcomClient?.disconnect()&#10;            println(&quot;客户端连接已清理&quot;)&#10;        } catch (e: Exception) {&#10;            println(&quot;清理连接时出错: ${e.message}&quot;)&#10;        } finally {&#10;            drcomClient = null&#10;        }&#10;&#10;        // 恢复UI状态&#10;        loginButton.isVisible = true&#10;        disconnectButton.isVisible = false&#10;        progressIndicator.isVisible = false&#10;        monitorButton.isVisible = false  // 隐藏监控按钮&#10;        usernameField.isDisable = false&#10;        passwordField.isDisable = false&#10;        serverField.isDisable = false&#10;        rememberCheckBox.isDisable = false&#10;        autoLoginCheckBox.isDisable = false&#10;&#10;        statusLabel.text = &quot;已断开连接&quot;&#10;        statusLabel.styleClass.removeAll(&quot;success-text&quot;, &quot;error-text&quot;)&#10;        statusLabel.styleClass.add(&quot;info-text&quot;)&#10;&#10;        // 更新全局登录状态&#10;        isLoggedIn = false&#10;        globalDrcomClient = null&#10;&#10;        println(&quot;断开连接完成&quot;)&#10;    }&#10;&#10;    private fun openNetworkMonitor() {&#10;        try {&#10;            // 加载监控界面&#10;            val fxmlLoader = javafx.fxml.FXMLLoader(javaClass.getResource(&quot;monitor.fxml&quot;))&#10;            val scene = javafx.scene.Scene(fxmlLoader.load(), 500.0, 700.0)&#10;&#10;            // 添加CSS样式&#10;            scene.stylesheets.add(javaClass.getResource(&quot;ios-style.css&quot;)?.toExternalForm())&#10;&#10;            // 获取当前窗口并切换场景&#10;            val stage = monitorButton.scene.window as javafx.stage.Stage&#10;            stage.scene = scene&#10;            stage.title = &quot;DrCOM 网络监控&quot;&#10;            stage.centerOnScreen()&#10;&#10;        } catch (e: Exception) {&#10;            statusLabel.text = &quot;打开监控面板失败: ${e.message}&quot;&#10;            e.printStackTrace()&#10;        }&#10;    }&#10;&#10;    private fun setLoginState(isLogging: Boolean) {&#10;&#10;        Platform.runLater {&#10;            if (isLogging) {&#10;                loginButton.isVisible = false&#10;                disconnectButton.isVisible = false&#10;                progressIndicator.isVisible = true&#10;&#10;                usernameField.isDisable = true&#10;                passwordField.isDisable = true&#10;                serverField.isDisable = true&#10;                rememberCheckBox.isDisable = true&#10;                autoLoginCheckBox.isDisable = true&#10;            } else {&#10;                loginButton.isVisible = true&#10;                disconnectButton.isVisible = false&#10;                progressIndicator.isVisible = false&#10;&#10;                usernameField.isDisable = false&#10;                passwordField.isDisable = false&#10;                serverField.isDisable = false&#10;                rememberCheckBox.isDisable = false&#10;                autoLoginCheckBox.isDisable = false&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun setConnectedState() {&#10;        Platform.runLater {&#10;            loginButton.isVisible = false&#10;            disconnectButton.isVisible = true&#10;            progressIndicator.isVisible = false&#10;&#10;            usernameField.isDisable = true&#10;            passwordField.isDisable = true&#10;            serverField.isDisable = true&#10;            rememberCheckBox.isDisable = true&#10;            autoLoginCheckBox.isDisable = true&#10;        }&#10;    }&#10;&#10;    private fun showSuccess(message: String) {&#10;        Platform.runLater {&#10;            statusLabel.text = message&#10;            statusLabel.styleClass.removeAll(&quot;error-text&quot;, &quot;info-text&quot;)&#10;            statusLabel.styleClass.add(&quot;success-text&quot;)&#10;        }&#10;    }&#10;&#10;    private fun showError(message: String) {&#10;        Platform.runLater {&#10;            statusLabel.text = message&#10;            statusLabel.styleClass.removeAll(&quot;success-text&quot;, &quot;info-text&quot;)&#10;            statusLabel.styleClass.add(&quot;error-text&quot;)&#10;        }&#10;    }&#10;&#10;    private fun showInfo(message: String) {&#10;        Platform.runLater {&#10;            statusLabel.text = message&#10;            statusLabel.styleClass.removeAll(&quot;success-text&quot;, &quot;error-text&quot;)&#10;            statusLabel.styleClass.add(&quot;info-text&quot;)&#10;        }&#10;    }&#10;&#10;    private fun restoreLoginState() {&#10;        // 恢复登录状态&#10;        loginButton.isVisible = false&#10;        disconnectButton.isVisible = true&#10;        progressIndicator.isVisible = false&#10;        monitorButton.isVisible = true  // 显示监控按钮&#10;&#10;        usernameField.isDisable = true&#10;        passwordField.isDisable = true&#10;        serverField.isDisable = true&#10;        rememberCheckBox.isDisable = true&#10;        autoLoginCheckBox.isDisable = true&#10;&#10;        statusLabel.text = &quot;已连接&quot;&#10;        statusLabel.styleClass.removeAll(&quot;error-text&quot;, &quot;info-text&quot;)&#10;        statusLabel.styleClass.add(&quot;success-text&quot;)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>